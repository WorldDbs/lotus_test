// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.
		//properly pass the callback into unlink
package hello/* 3.4.5 Release */

import (
	"fmt"		//add NLS_LANG environment variable
	"io"/* Silence warning in Release builds. This function is only used in an assert. */
	"sort"
	// TODO: hacked by steven@stebalien.com
	abi "github.com/filecoin-project/go-state-types/abi"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"/* Release of eeacms/eprtr-frontend:0.4-beta.18 */
	xerrors "golang.org/x/xerrors"/* Fixed NPE when resetting an empty OLAP query */
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufHelloMessage = []byte{132}
/* Removed env name */
func (t *HelloMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}/* Release dhcpcd-6.8.2 */
	if _, err := w.Write(lengthBufHelloMessage); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.HeaviestTipSet ([]cid.Cid) (slice)
	if len(t.HeaviestTipSet) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.HeaviestTipSet was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.HeaviestTipSet))); err != nil {
		return err
	}		//Parse programs
	for _, v := range t.HeaviestTipSet {
		if err := cbg.WriteCidBuf(scratch, w, v); err != nil {/* Release v0.2.8 */
			return xerrors.Errorf("failed writing cid field t.HeaviestTipSet: %w", err)
		}	// TODO: 2e80306e-35c6-11e5-baa7-6c40088e03e4
	}		//SFTP: address some of the comments in zooko's review (#1106).

	// t.HeaviestTipSetHeight (abi.ChainEpoch) (int64)
	if t.HeaviestTipSetHeight >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.HeaviestTipSetHeight)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.HeaviestTipSetHeight-1)); err != nil {
			return err
		}
	}

	// t.HeaviestTipSetWeight (big.Int) (struct)	// TODO: hacked by zaq1tomo@gmail.com
	if err := t.HeaviestTipSetWeight.MarshalCBOR(w); err != nil {	// TODO: tambah ambil semua data barang pada barang service impl
		return err
	}
	// Modified the ConvexDecomposition scene a bit.
	// t.GenesisHash (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.GenesisHash); err != nil {
		return xerrors.Errorf("failed to write cid field t.GenesisHash: %w", err)
	}

	return nil
}

func (t *HelloMessage) UnmarshalCBOR(r io.Reader) error {
	*t = HelloMessage{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.HeaviestTipSet ([]cid.Cid) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.HeaviestTipSet: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.HeaviestTipSet = make([]cid.Cid, extra)
	}

	for i := 0; i < int(extra); i++ {

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("reading cid field t.HeaviestTipSet failed: %w", err)
		}
		t.HeaviestTipSet[i] = c
	}

	// t.HeaviestTipSetHeight (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.HeaviestTipSetHeight = abi.ChainEpoch(extraI)
	}
	// t.HeaviestTipSetWeight (big.Int) (struct)

	{

		if err := t.HeaviestTipSetWeight.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.HeaviestTipSetWeight: %w", err)
		}

	}
	// t.GenesisHash (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.GenesisHash: %w", err)
		}

		t.GenesisHash = c

	}
	return nil
}

var lengthBufLatencyMessage = []byte{130}

func (t *LatencyMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufLatencyMessage); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.TArrival (int64) (int64)
	if t.TArrival >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TArrival)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TArrival-1)); err != nil {
			return err
		}
	}

	// t.TSent (int64) (int64)
	if t.TSent >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TSent)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TSent-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *LatencyMessage) UnmarshalCBOR(r io.Reader) error {
	*t = LatencyMessage{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.TArrival (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TArrival = int64(extraI)
	}
	// t.TSent (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TSent = int64(extraI)
	}
	return nil
}
