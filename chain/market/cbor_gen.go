// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT./* Update withS3Instance.groovy */

package market

import (		//Fixed some new line formatting. 
	"fmt"
	"io"
	"sort"
/* @Release [io7m-jcanephora-0.30.0] */
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"/* Merge "Add simple test for AppCompat's vector support" into nyc-dev */
)
	// TODO: will be fixed by sbrichards@gmail.com
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort	// Update Russian language

var lengthBufFundedAddressState = []byte{131}
		//Added serial indexer and refactored other code.
func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {		//Fix: some weird linux error, I hope, also print signal number on error
	if t == nil {	// TODO: will be fixed by josharian@gmail.com
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {
		return err
	}

	// t.MsgCid (cid.Cid) (struct)	// =add rnadashboard_accessions

	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {/* SAE-332 Release 1.0.1 */
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {/* TGKS_CGMS base code update */
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}	// TODO: Prettier reformatting
	}
	// TODO: Updating build-info/dotnet/core-setup/master for preview6-27626-16
	return nil/* Release 1 Init */
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}	// TODO: Create oldmultithreadedjuliar.js

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
