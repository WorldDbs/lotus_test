// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market
/* Update login.template.php */
import (	// TODO: will be fixed by steven@stebalien.com
	"fmt"/* Create new folder 'Release Plan'. */
	"io"
	"sort"	// TODO: Docs: Add BountySource badge to README

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufFundedAddressState = []byte{131}

func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)	// Xigt RDF(S) data model
		return err		//Update and rename Intro_to_Javscript.md to roman_numerals.md
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)/* double negative */
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {/* Added HTTP connector priorities. */
		return err/* AboutDialogGraphicsView: Improved the about dialog positioning on Linux. */
	}

	// t.MsgCid (cid.Cid) (struct)

	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {/* Release: Making ready to release 6.7.1 */
			return err
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {/* Renames code of conduct file */
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}
/* Release PEAR2_Templates_Savant-0.3.3 */
	return nil/* Merge "Remove legacy-tempest-dsvm-multinode-live-migration job usage" */
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}

	br := cbg.GetPeeker(r)		//ONEARTH-542 Fixed unsupported reproject layers not being ignored
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {/* Merge "Document ChangeReportFormatter" */
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
